<?php

require_once dirname(__FILE__) . '/../../Classes/GameOfLife.php';

/**
 * Test class for GameOfLife.
 * Generated by PHPUnit on 2011-04-16 at 17:22:04.
 */
class GameOfLifeTest extends PHPUnit_Framework_TestCase {

	protected function setUp() {
	}

	public function setupField(){
		$object = new GameOfLife();
		$object->createField(5,6);
		return $object;
	}

	public function testCreateField() {
		$game = $this->setupField();
		$this->assertEquals(5, sizeof($game->field));
		$this->assertEquals(35, sizeof($game->field, 1));
	}

	public function testSetAlive(){
		$game = $this->setupField();
		$game->setAlive(3,3);
		$this->assertEquals(true, $game->isAlive(3,3));
	}

	public function testSetDead(){
		$game = $this->setupField();
		$game->setDead(3,3);
		$this->assertEquals(false, $game->isAlive(3,3));
	}  
  
	public function testDrawMap() {
		$game = $this->setupField();
		$HtmlOutput = $game->drawField();
		$this->assertEquals(1, substr_count($HtmlOutput, '<table' ));
		$this->assertEquals(5, substr_count($HtmlOutput, '<tr'));
		$this->assertEquals(30, substr_count($HtmlOutput, '<td class='));
		$this->assertEquals(30, substr_count($HtmlOutput, '</td>'));
		$this->assertEquals(5, substr_count($HtmlOutput, '</tr>'));
		$this->assertEquals(1, substr_count($HtmlOutput, '</table>'));
	}

	public function testGetCssBackgroundClass() {
		$game = $this->setupField();
		$game->setDead(3,3);
		$this->assertEquals("class='dead'", $game->getBackground(3,3));
		$game->setAlive(3,3);
		$this->assertEquals("class='alive'", $game->getBackground(3,3));
	}
        
  public function testGameRuleOneAlive() {
		$game = $this->setupField();
		$game->setAlive(3,3);          
		$game->setAlive(3,4);
    $game->applyGameRules();
    $this->assertEquals(false, $game->isAlive(3,3));
  }

  public function testGameRuleOneDead() {
		$game = $this->setupField();
		$game->setAlive(3,3);          
		$game->setAlive(3,5);
    $game->applyGameRules();
    $this->assertEquals(false, $game->isAlive(3,4));
  }
    
  public function testGameRuleTwoAlive() {
    $game = $this->setupField();
		$game->setAlive(3,3);          
		$game->setAlive(3,4);
		$game->setAlive(3,5);
    $game->applyGameRules();
    $this->assertEquals(true, $game->isAlive(3,4));    
  }

  public function testGameRuleTwoDead() {
    $game = $this->setupField();
		$game->setAlive(3,3);          
		$game->setAlive(3,5);
    $game->applyGameRules();
    $this->assertEquals(false, $game->isAlive(3,4));    
  }  
  
  public function testGameRuleThreeAlive() {
    $game = $this->setupField();
		$game->setAlive(3,3);          
		$game->setAlive(3,4);
		$game->setAlive(3,5);
		$game->setAlive(2,4);
		$game->setAlive(4,4);
    $game->applyGameRules();
    $this->assertEquals(false, $game->isAlive(3,4));    
  }  

  public function testGameRuleThreeDead() {
    $game = $this->setupField();
		$game->setAlive(3,3);          
		$game->setAlive(3,5);
		$game->setAlive(2,4);
		$game->setAlive(4,4);
    $game->applyGameRules();
    $this->assertEquals(false, $game->isAlive(3,4));    
  }  
  
  public function testGameRuleFourDead() {
    $game = $this->setupField();
		$game->setAlive(2,3);          
		$game->setAlive(2,5);
		$game->setAlive(4,5);
    $game->applyGameRules();
    $this->assertEquals(true, $game->isAlive(3,4));    
  }    

  public function testGameRuleFourAlive() {
    $game = $this->setupField();
		$game->setAlive(2,3);          
		$game->setAlive(3,4);          
		$game->setAlive(2,5);
		$game->setAlive(4,5);
    $game->applyGameRules();
    $this->assertEquals(true, $game->isAlive(3,4));    
  }    
  
  public function testGetMaxX() {
    $game = $this->setupField();
    $expected = $game->getMaxX();
    $this->assertEquals(5,$expected, "getMaxX");
    $expected = $game->maxx;
    $this->assertEquals(5,$expected, "maxx");
    // Check caching
    $game->maxx = 6;
    $expected = $game->getMaxX();
    $this->assertEquals(6,$expected, "maxx cached");
  }

  public function testGetMaxY() {
    $game = $this->setupField();
    $expected = $game->getMaxY();
    $this->assertEquals(6,$expected, "getMaxY");
    $expected = $game->maxy;
    $this->assertEquals(6,$expected, "maxy");
    // Check caching
    $game->maxy = 5;
    $expected = $game->getMaxY();
    $this->assertEquals(5,$expected, "maxy cached");
  }
  
  public function testToggleDead() {
    $game = $this->setupField();
    $game->setAlive(3,3);
    $game->toggleStatus(3,3);
    $this->assertEquals(false, $game->isAlive(3,3));        
  }

  public function testToggleAlive() {
    $game = $this->setupField();
    $game->setDead(3,3);
    $game->toggleStatus(3,3);
    $this->assertEquals(true, $game->isAlive(3,3));        
  }  
  
  protected function tearDown() {
	}

}

?>
